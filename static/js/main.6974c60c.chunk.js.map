{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","cookies","Cookies","App","props","state","cookie","results","searchKey","searchTerm","get","error","needsToSearchTopStories","bind","setSearchTopStories","onDismiss","fetchSearchTopStories","onSearchChange","onSearchSubmit","this","page","axios","then","result","data","catch","setState","hits","oldHits","updatedHits","id","filter","item","objectID","event","target","value","set","path","preventDefault","list","className","onChange","onSubmit","onClick","Component","Search","children","type","largeColumn","width","midColumn","smallColumn","Table","map","key","style","href","url","title","author","num_comments","points","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6974c60c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport Cookies from 'universal-cookie';\n\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst cookies = new Cookies();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cookie: cookies,\n      results: null,\n      searchKey: '',\n      searchTerm: cookies.get('savedSearch') || DEFAULT_QUERY,\n      error: null,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n  fetchSearchTopStories(searchTerm, page = 0) {\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this.setSearchTopStories(result.data))\n      .catch(error => this.setState({ error }));\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n\n    const oldHits = results && results[searchKey]\n      ? results[searchKey].hits\n      : [];\n\n    const updatedHits = [\n      ...oldHits,\n      ...hits\n    ];\n\n    this.setState({\n      results: {\n        ...results, [searchKey]: { hits: updatedHits, page }\n      }\n    });\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: { ...results, [searchKey]: { hits: updatedHits, page } }\n    });\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm, cookie } = this.state;\n    this.setState({ searchKey: searchTerm });\n    cookie.set('savedSearch', searchTerm, { path: '/' });\n\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    const { searchTerm, results, searchKey, error } = this.state;\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\n\n    if (error) {\n      return <p>Something went wrong.</p>\n    }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            onChange={this.onSearchChange}\n            value={searchTerm}\n            onSubmit={this.onSearchSubmit}\n            >\n            Search\n          </Search>\n        </div>\n        {error ?\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div> :\n          <Table\n            list={list}\n            onDismiss={this.onDismiss}\n          />}\n        <div className=\"interactions\">\n          <Button onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n            More\n            </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Search = ({ value, onChange, onSubmit, children }) =>\n  <form onSubmit={onSubmit} >\n    <input\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n    />\n    <button type=\"submit\">\n      {children}\n    </button>\n  </form>\n\n\nconst largeColumn = { width: '40%', };\nconst midColumn = { width: '30%', };\nconst smallColumn = { width: '10%', };\n\nexport const Table = ({ list, onDismiss }) =>\n  <div className=\"table\">\n    {list.map(item =>\n      <div key={item.objectID} className=\"table-row\">\n        <span style={largeColumn}>\n          <a href={item.url}>{item.title}</a></span>\n\n        <span style={midColumn}>\n          {item.author}</span>\n\n        <span style={smallColumn}>\n          {item.num_comments}</span>\n\n        <span style={smallColumn}>\n          {item.points}</span>\n\n        <span style={smallColumn}>\n          <Button onClick={() => onDismiss(item.objectID)}\n            type=\"button\"\n            className=\"button-inline\">\n            Dismiss\n              </Button>\n        </span>\n      </div>\n    )}\n  </div>\n\nexport const Button = ({ onClick, className, children }) =>\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\">\n    {children}\n  </button>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif(module.hot){\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}